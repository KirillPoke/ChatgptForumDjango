name: Docker Build and Push

on:
  push:
    branches:
      - implement-cd

env:
  AWS_REGION: eu-west-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: GPTForumDevService                 # set this to your Amazon ECS service name
  ECS_CLUSTER: GPTForumDev                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: infrastructure/task-definition.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: server          # set this to the name of the container in the
  DB_HOST: database-1.cedgctrvkeux.eu-west-1.rds.amazonaws.com
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4

      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: public.ecr.aws/w9e5u8a2/gpt-forum:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
#
#      - name: Add environment variables to task definition
#        id: run-script
#        run: python infrastructure/add_env_variables_to_task_definitions.py
#

#      - name: Deploy to Amazon ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: infrastructure/task-definition.json
#          network-configuration: infrastructure/network-configuration.json
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
